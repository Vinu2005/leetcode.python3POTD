class Solution:
    def jobScheduling(self, startTime: List[int], endTime: List[int], profit: List[int]) -> int:
        jobs = sorted(zip(startTime, endTime, profit), key=lambda x: x[1])
        dp = [[0, 0]]  # [time, profit]

        for s, e, p in jobs:
            i = bisect.bisect(dp, [s + 1]) - 1  # find the latest job that doesn't conflict with the current job
            if dp[i][1] + p > dp[-1][1]:  # if the profit of adding the current job is greater
                dp.append([e, dp[i][1] + p])  # add the current job
        return dp[-1][1]
