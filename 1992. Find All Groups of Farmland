class Solution:
    def findFarmland(self, land: List[List[int]]) -> List[List[int]]:
        def dfs(row, col):
            visited[row][col] = 1  # Mark as visited
            nonlocal row2, col2
            row2 = max(row2, row)
            col2 = max(col2, col)
            
            for dr, dc in [(1, 0), (-1, 0), (0, 1), (0, -1)]:
                nr, nc = row + dr, col + dc
                if 0 <= nr < m and 0 <= nc < n and land[nr][nc] == 1 and not visited[nr][nc]:
                    dfs(nr, nc)
        
        m, n = len(land), len(land[0])
        visited = [[0] * n for _ in range(m)]
        ans = []
        
        for i in range(m):
            for j in range(n):
                if land[i][j] == 1 and not visited[i][j]:
                    row1, col1 = i, j
                    row2, col2 = 0, 0
                    dfs(i, j)
                    ans.append([row1, col1, row2, col2])
        
        return ans
        
