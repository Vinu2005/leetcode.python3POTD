# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def amountOfTime(self, root: Optional[TreeNode], start: int) -> int:
        graph = {}
        stack = [(None, root)]
        while stack:
            parent, node = stack.pop()
            if node:
                if node.val not in graph:
                    graph[node.val] = []
                if parent:
                    graph[node.val].append(parent.val)
                    graph[parent.val].append(node.val)
                stack.append((node, node.left))
                stack.append((node, node.right))
        
        # Use BFS to find the distance between each node and the start node
        queue = deque([(start, 0)])
        max_distance = 0
        visited = set([start])
        
        while queue:
            node, distance = queue.popleft()
            max_distance = max(max_distance, distance)
            
            for neighbor in graph[node]:
                if neighbor not in visited:
                    visited.add(neighbor)
                    queue.append((neighbor, distance + 1))
        
        return max_distance
