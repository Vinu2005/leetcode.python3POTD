# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def doubleIt(self, head: Optional[ListNode]) -> Optional[ListNode]:
        # Handle edge case where head is None
        if not head:
            return head
        
        # Reverse the linked list
        prev = None
        current = head
        while current:
            next_node = current.next
            current.next = prev
            prev = current
            current = next_node
        head = prev
        
        carry = 0
        current = head
        while current:
            double_val = current.val * 2 + carry
            current.val = double_val % 10
            carry = double_val // 10
            if not current.next and carry:
                current.next = ListNode(carry)
                break
            current = current.next
        
        # Reverse the linked list back
        prev = None
        while head:
            next_node = head.next
            head.next = prev
            prev = head
            head = next_node
        
        return prev
