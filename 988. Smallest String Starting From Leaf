# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def smallestFromLeaf(self, root: Optional[TreeNode]) -> str:
        def dfs(node, path):
            if not node:
                return
            path.append(chr(ord('a') + node.val))  # Convert node value to character
            if not node.left and not node.right:  # If leaf node, construct the string
                paths.append(''.join(reversed(path)))
            else:
                dfs(node.left, path)
                dfs(node.right, path)
            path.pop()  # Backtrack
        
        paths = []  # Store all possible paths
        dfs(root, [])
        return min(paths)  # Return the lexicographically smallest path
        
