# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def addOneRow(self, root: Optional[TreeNode], val: int, depth: int) -> Optional[TreeNode]:
        if depth == 1:
            new_root = TreeNode(val)
            new_root.left = root
            return new_root

        self.dfs(root, val, depth, 1)
        return root
    
    def dfs(self, node: TreeNode, val: int, depth: int, current_depth: int):
        if not node:
            return
        
        if current_depth == depth - 1:
            # Add new nodes as left and right children
            left_child = TreeNode(val)
            left_child.left = node.left
            node.left = left_child
            
            right_child = TreeNode(val)
            right_child.right = node.right
            node.right = right_child
            return
        
        self.dfs(node.left, val, depth, current_depth + 1)
        self.dfs(node.right, val, depth, current_depth + 1)
        
