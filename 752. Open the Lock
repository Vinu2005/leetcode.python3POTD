class Solution:
    def openLock(self, deadends: List[str], target: str) -> int:
        def neighbors(node):
            # Generate all possible neighbors of a node
            neighbors = []
            for i in range(4):
                for d in (-1, 1):
                    new_digit = (int(node[i]) + d) % 10
                    neighbor = node[:i] + str(new_digit) + node[i+1:]
                    neighbors.append(neighbor)
            return neighbors
        
        deadends = set(deadends)
        if "0000" in deadends:
            return -1  # Target is in the deadends
        
        visited = set()
        queue = [("0000", 0)]  # Queue stores (node, steps)
        
        while queue:
            node, steps = queue.pop(0)
            if node == target:
                return steps
            
            if node in visited or node in deadends:
                continue
            
            visited.add(node)
            
            for neighbor in neighbors(node):
                if neighbor not in visited and neighbor not in deadends:
                    queue.append((neighbor, steps + 1))
        
        return -1  # Target not reachable

        
