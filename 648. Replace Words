class TrieNode:
    def __init__(self):
        self.children = dict()
        self.is_word = False
        
class Trie:
    def __init__(self):
        self.root = TrieNode()
        
    def insert(self, word):    
        node = self.root
        for c in word:
            if c not in node.children:
                node.children[c] = TrieNode()
            node = node.children[c]    
        node.is_word = True            
        
    def root_of(self, word):        
        node, prefix = self.root, ''
        for c in word:
            if c not in node.children:
                return word
            prefix += c    
            node = node.children[c]    
            if node.is_word:
                return prefix
        return word            
    
class Solution:
    def replaceWords(self, dictionary: List[str], sentence: str) -> str:
        trie = Trie()
        for root in dictionary:
            trie.insert(root)
            
        return ' '.join([trie.root_of(word) for word in sentence.split(' ')])
        
