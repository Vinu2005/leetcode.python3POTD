# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right

class Solution:
    def diameterOfBinaryTree(self, root: TreeNode) -> int:
        # Helper function to calculate the height of a node
        def height(node):
            nonlocal diameter
            if not node:
                return 0
            # Recursively calculate height of left and right subtrees
            left_height = height(node.left)
            right_height = height(node.right)
            # Update diameter if the sum of left and right heights is greater
            diameter = max(diameter, left_height + right_height)
            # Return the height of the current node
            return 1 + max(left_height, right_height)
        
        # Initialize diameter to 0
        diameter = 0
        # Start calculating the height from the root node
        height(root)
        # Return the diameter of the binary tree
        return diameter
