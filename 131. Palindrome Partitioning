class Solution:
    def partition(self, s: str) -> List[List[str]]:
        n = len(s)
        
        # Create a 2D DP array to store palindrome information
        dp = [[False] * n for _ in range(n)]
        
        # Fill the DP array
        for length in range(1, n + 1):  # length of the substring
            for start in range(n - length + 1):  # start index of the substring
                end = start + length - 1  # end index of the substring
                if s[start] == s[end]:
                    if length <= 2:
                        dp[start][end] = True
                    else:
                        dp[start][end] = dp[start + 1][end - 1]
        
        def backtrack(start: int, path: List[str]):
            if start == n:
                result.append(path[:])
                return
            for end in range(start, n):
                if dp[start][end]:
                    path.append(s[start:end + 1])
                    backtrack(end + 1, path)
                    path.pop()
        
        result = []
        backtrack(0, [])
        return result
        
